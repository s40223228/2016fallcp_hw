<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2016Fall CPA 課程網誌 (虎尾科大MDE)</title><link href="./" rel="alternate"></link><link href="./feeds/course.atom.xml" rel="self"></link><id>./</id><updated>2017-01-06T00:00:00+08:00</updated><entry><title>CP W17練習</title><link href="./cp-w17lian-xi.html" rel="alternate"></link><published>2017-01-06T00:00:00+08:00</published><updated>2017-01-06T00:00:00+08:00</updated><author><name>40223228</name></author><id>tag:,2017-01-06:./cp-w17lian-xi.html</id><summary type="html">&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下可以執行  Brython 程式 --&gt;

&lt;canvas id="onebar" width="400" height="400"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document
from browser import window
from browser import timer
import math
canvas = document["onebar"]
ctx = canvas.getContext("2d")

# 畫圓函式
def circle(x,y,r):
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, True)
    ctx.fill()
    ctx.closePath()

# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 將畫筆移動到 (200, 200) 座標點
ctx.moveTo(200, 200)
# 然後畫直線到 (200, 300) 座標點
ctx.lineTo(200, 300)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()

circle(200, 200, 5)
&lt;/script&gt;</summary><category term="W17"></category></entry><entry><title>CP W17練習</title><link href="./cp-w17lian-xi.html" rel="alternate"></link><published>2017-01-06T00:00:00+08:00</published><updated>2017-01-06T00:00:00+08:00</updated><author><name>40223228</name></author><id>tag:,2017-01-06:./cp-w17lian-xi.html</id><summary type="html">&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下可以執行  Brython 程式 --&gt;

&lt;!-- div 標註區主要用來輸出字串 --&gt;

&lt;div id="div1"&gt;&lt;/div&gt;

&lt;!-- canvas 標註區則用來顯示繪圖內容
canvas default width 為 300 height 則為 150
--&gt;

&lt;canvas id="can1"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document
from browser import html
canvas = document["can1"]
ctx = canvas.getContext("2d")

def greensquare(ev):
    ctx.fillStyle = "green"
    ctx.fillRect(10, 10, 100, 100)

def whitesquare(ev):
    ctx.fillStyle = "white"
    ctx.fillRect(10, 10, 100, 100)

document["but1"].bind("click", greensquare)
document["but2"].bind("click", whitesquare)
&lt;/script&gt;

&lt;p&gt;&lt;button id="but1"&gt;畫綠色矩型&lt;/button&gt;
&lt;button id="but2"&gt;清除&lt;/button&gt;&lt;/p&gt;

&lt;pre class="brush: python"&gt;&lt;div id="div1"&gt;&lt;/div&gt;
&lt;!-- canvas 標註區則用來顯示繪圖內容
canvas default width 為 300 height 則為 150
--&gt;
&lt;canvas id="can1"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
from browser import document
from browser import html
canvas = document["can1"]
ctx = canvas.getContext("2d")

def greensquare(ev):
    ctx.fillStyle = "green"
    ctx.fillRect(10, 10, 100, 100)

def whitesquare(ev):
    ctx.fillStyle = "white"
    ctx.fillRect(10, 10, 100, 100)

document["but1"].bind("click", greensquare)
document["but2"].bind("click", whitesquare)
&lt;/script&gt;
&lt;button id="but1"&gt;畫綠色矩型&lt;/button&gt;
&lt;button id="but2"&gt;清除&lt;/button&gt;
&lt;/pre&gt;

&lt;p&gt;以下為基本動畫 (&lt;a href="http://jsdo.it/Salvatore/hs65"&gt;程式來源&lt;/a&gt;):&lt;/p&gt;

&lt;div id="content"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document
from browser import html
from browser import alert
from browser import timer

# 數列內容為圖檔的 URL 連結字串
listImages = [
              "https://nodebox.net/code/data/media/growing_things.jpg",
              "https://nodebox.net/code/data/media/neongolden.jpg"
              ]

# 以下3個變數, 其資料型別為 dictionary
dictImages = {}
dictRot = {}
dictAnim = {}

# anim 為動態繪圖對應變數
anim = None

def createIMG(id,src):
    i = 0
    for i in range(len(listImages)):
        dictImages[i] = html.IMG(src="%s"%listImages[i], id=i, alt="Nodebox 圖檔")
        dictImages[i].onclick = info 
        dictImages[i].onmouseover = rotateImage
        dictRot[i] = 0
        dictAnim[i] = False

def rotateImage(e):
    e.target.style.cursor = 'pointer'
    target = int(e.target.id)
    dictRot[target] += 45
    dictAnim[target] = True
    rot =  dictRot[target] 
    e.target.style.webkitTransform = "rotate(%sdeg)"%rot

def info(e):
    # 利用 alert() 顯示滑鼠點選 target 的 alt 資料
    alert(e.target.alt)

lenList = len(listImages)

for i in range(lenList):
    createIMG(i,listImages[i])

def startAnimation():
    global dictRot
    dictRot[0] += 3
    rot =  dictRot[0] 
    dictImages[0].style.webkitTransform = "rotate(%sdeg)"%rot
    dictImages[1].style.webkitTransform = "rotate(%sdeg)"%-rot

def launchAnimation(ev):
    global anim
    # 初始旋轉, anim 為 None
    if anim is None:
        anim = timer.set_interval(startAnimation, 30)
        # 初始旋轉後, 按鈕文字轉為"暫停旋轉"
        document['but3'].text = '暫停旋轉'
    elif anim == 'hold':
        # 當 anim 為 'hold' 表示曾經暫停後的旋轉, 因此持續以 set_interval() 持續旋轉, 且將 but3 文字轉為"暫停旋轉"
        anim = timer.set_interval(startAnimation, 30)
        document['but3'].text = '暫停旋轉'
    else:
        # 初始旋轉後, 使用者再按 but3, 此時 anim 非 None 也不是 'hold', 因此會執行 clear_interval() 暫停旋轉
        # 且將 anim 變數設為 'hold', 且 but3 文字轉為"繼續旋轉"
        timer.clear_interval(anim)
        anim = 'hold'
        document['but3'].text = '繼續旋轉'

for i in range(lenList):
    document["content"] &lt;= dictImages[i]
document["but3"].bind("click", launchAnimation)
&lt;/script&gt;

&lt;p&gt;&lt;button id="but3"&gt;旋轉圖檔&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;四連桿模擬:&lt;/p&gt;

&lt;canvas id="fourbar" width="600" height="600"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document
from browser import html
from browser import timer
import math

class Coord(object):
    def __init__(self,x,y):
        self.x = x
        self.y = y

    def __sub__(self,other):
        # This allows you to substract vectors
        return Coord(self.x-other.x,self.y-other.y)

    def __repr__(self):
        # Used to get human readable coordinates when printing
        return "Coord(%f,%f)"%(self.x,self.y)

    def length(self):
        # Returns the length of the vector
        return math.sqrt(self.x**2 + self.y**2)

    def angle(self):
        # Returns the vector's angle
        return math.atan2(self.y,self.x)

def normalize(coord):
    return Coord(
        coord.x/coord.length(),
        coord.y/coord.length()
        )

def perpendicular(coord):
    # Shifts the angle by pi/2 and calculate the coordinates
    # using the original vector length
    return Coord(
        coord.length()*math.cos(coord.angle()+math.pi/2),
        coord.length()*math.sin(coord.angle()+math.pi/2)
        )

# 點類別
class Point(object):
    # 起始方法
    def __init__(self, x, y):
        self.x = x
        self.y = y

    # 繪製方法
    def drawMe(self, g, r):
        self.g = g
        self.r = r
        self.g.save()
        self.g.moveTo(self.x,self.y)
        self.g.beginPath()
        # 根據 r 半徑繪製一個圓代表點的所在位置
        self.g.arc(self.x, self.y, self.r, 0, 2*math.pi, True)
        self.g.moveTo(self.x,self.y)
        self.g.lineTo(self.x+self.r, self.y)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x-self.r, self.y)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x, self.y+self.r)
        self.g.moveTo(self.x, self.y)
        self.g.lineTo(self.x, self.y-self.r)
        self.g.stroke()
        self.g.restore()

    # 加入 Eq 方法
    def Eq(self, pt):
        self.x = pt.x
        self.y = pt.y

    # 加入 setPoint 方法
    def setPoint(self, px, py):
        self.x = px
        self.y = py

    # 加上 distance(pt) 方法, 計算點到 pt 的距離
    def distance(self, pt):
        self.pt = pt
        x = self.x - self.pt.x
        y = self.y - self.pt.y
        return math.sqrt(x * x + y * y)

    # 利用文字標示點的座標位置
    def tag(self, g):
        self.g = g
        self.g.beginPath()
        self.g.fillText("%d, %d"%(self.x, self.y),self.x, self.y)
        self.g.stroke()


# Line 類別物件
class Line(object):

    # 起始方法
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        # 直線的第一點, 設為線尾
        self.Tail = self.p1
        # 直線組成的第二點, 設為線頭
        self.Head = self.p2
        # 直線的長度屬性
        self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2))

    # setPP 以指定頭尾座標點來定義直線
    def setPP(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.Tail = self.p1
        self.Head = self.p2
        self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2))

    # setRT 方法 for Line, 應該已經確定 Tail 點, 然後以 r, t 作為設定 Head 的參考
    def setRT(self, r, t):
        self.r = r
        self.t = t
        x = self.r * math.cos(self.t)
        y = self.r * math.sin(self.t)
        self.Tail.Eq(self.p1)
        self.Head.setPoint(self.Tail.x + x,self.Tail.y + y)

    # getR 方法 for Line
    def getR(self):
        # x 分量與 y 分量
        x = self.p1.x - self.p2.x
        y = self.p1.y - self.p2.y
        return math.sqrt(x * x + y * y)

    # 根據定義 atan2(y,x), 表示 (x,y) 與 正 x 軸之間的夾角, 介於 pi 與 -pi 間
    def getT(self):
        x = self.p2.x - self.p1.x
        y = self.p2.y - self.p1.y
        if (math.fabs(x) &lt; math.pow(10,-100)):
            if(y &lt; 0.0):
                return (-math.pi/2)
            else:
                return (math.pi/2)
        else:
            return math.atan2(y, x)

    # setTail 方法 for Line
    def setTail(self, pt):
        self.pt = pt
        self.Tail.Eq(pt)
        self.Head.setPoint(self.pt.x + self.x, self.pt.y + self.y)

    # getHead 方法 for Line
    def getHead(self):
        return self.Head

    def getTail(self):
        return self.Tail

    def drawMe(self, g):
        self.g = g
        self.g.beginPath()
        self.g.moveTo(self.p1.x,self.p1.y)
        self.g.lineTo(self.p2.x,self.p2.y)
        self.g.stroke()

    def test(self):
        return ("this is pure test to Inherit")


class Link(Line):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
        self.length = math.sqrt(math.pow((self.p2.x - self.p1.x), 2) + math.pow((self.p2.y - self.p1.y), 2))

    #g context
    def drawMe(self, g):
        self.g = g
        hole = 5
        radius = 10
        length = self.getR()
        # alert(length)
        # 儲存先前的繪圖狀態
        self.g.save()
        self.g.translate(self.p1.x,self.p1.y)
        #alert(str(self.p1.x)+","+str(self.p1.y))
        #self.g.rotate(-((math.pi/2)-self.getT()))
        self.g.rotate(-math.pi*0.5 + self.getT())
        #alert(str(self.getT()))
        #self.g.rotate(10*math.pi/180)
        #this.g.rotate(-(Math.PI/2-this.getT()));
        # 必須配合畫在 y 軸上的 Link, 進行座標轉換, 也可以改為畫在 x 軸上...
        self.g.beginPath()
        self.g.moveTo(0,0)
        self.g.arc(0, 0, hole, 0, 2*math.pi, True)
        self.g.stroke()

        self.g.moveTo(0,length)
        self.g.beginPath()
        self.g.arc(0,length, hole, 0, 2*math.pi, True)
        self.g.stroke()

        self.g.moveTo(0,0)
        self.g.beginPath()
        self.g.arc(0,0, radius, 0, math.pi, True)
        self.g.moveTo(0+radius,0)
        self.g.lineTo(0+radius,0+length)
        self.g.stroke()

        self.g.moveTo(0,0+length)
        self.g.beginPath()
        self.g.arc(0, 0+length, radius, math.pi, 0, True)
        self.g.moveTo(0-radius,0+length)
        self.g.lineTo(0-radius,0)
        self.g.stroke()

        self.g.restore()

        self.g.beginPath()
        self.g.fillStyle = "red"
        self.g.font = "bold 18px sans-serif"
        self.g.fillText("%d, %d"%(self.p2.x, self.p2.y),self.p2.x, self.p2.y)
        self.g.stroke()
        #self.g.restore()


class Triangle(object):
    def __init__(self, p1, p2, p3):
        self.p1 = p1
        self.p2 = p2
        self.p3 = p3

    def getLenp3(self):
        p1 = self.p1
        ret = p1.distance(self.p2)
        return ret

    def getLenp1(self):
        p2 = self.p2
        ret = p2.distance(self.p3)
        return ret

    def getLenp2(self):
        p1 = self.p1
        ret = p1.distance(self.p3)
        return ret

    # 角度
    def getAp1(self):
        ret = math.acos(((self.getLenp2() * self.getLenp2() + self.getLenp3() * self.getLenp3()) - self.getLenp1() * self.getLenp1()) / (2* self.getLenp2() * self.getLenp3()))
        return ret

    #
    def getAp2(self):
        ret =math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp3() * self.getLenp3()) - self.getLenp2() * self.getLenp2()) / (2* self.getLenp1() * self.getLenp3()))
        return ret

    def getAp3(self):
        ret = math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp2() * self.getLenp2()) - self.getLenp3() * self.getLenp3()) / (2* self.getLenp1() * self.getLenp2()))
        return ret

    def drawMe(self, g):
        self.g = g
        r = 5
        # 繪出三個頂點
        self.p1.drawMe(self.g,r)
        self.p2.drawMe(self.g,r)
        self.p3.drawMe(self.g,r)
        line1 = Line(self.p1,self.p2)
        line2 = Line(self.p1,self.p3)
        line3 = Line(self.p2,self.p3)
        # 繪出三邊線
        line1.drawMe(self.g)
        line2.drawMe(self.g)
        line3.drawMe(self.g)

    # ends Triangle def
    # 透過三個邊長定義三角形
    def setSSS(self, lenp3, lenp1, lenp2):
        self.lenp3 = lenp3
        self.lenp1 = lenp1
        self.lenp2 = lenp2
        self.ap1 = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2* self.lenp2 * self.lenp3))
        self.ap2 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2* self.lenp1 * self.lenp3))
        self.ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2* self.lenp1 * self.lenp2))

    # 透過兩個邊長與夾角定義三角形
    def setSAS(self, lenp3, ap2, lenp1):
        self.lenp3 = lenp3
        self.ap2 = ap2
        self.lenp1 = lenp1
        self.lenp2 = math.sqrt((self.lenp3 * self.lenp3 + self.lenp1 * self.lenp1) - 2* self.lenp3 * self.lenp1 * math.cos(self.ap2))
        #等於 SSS(AB, BC, CA)

    def setSaSS(self, lenp2, lenp3, lenp1):
        self.lenp2 = lenp2
        self.lenp3 = lenp3
        self.lenp1 = lenp1
        if(self.lenp1 &gt; (self.lenp2 + self.lenp3)):
        #&lt;CAB 夾角為 180 度, 三點共線且 A 介於 BC 之間
            ret = math.pi
        else :
            # &lt;CAB 夾角為 0, 三點共線且 A 不在 BC 之間
            if((self.lenp1 &lt; (self.lenp2 - self.lenp3)) or (self.lenp1 &lt; (self.lenp3 - self.lenp2))):
                ret = 0.0
            else :
            # 透過餘絃定理求出夾角 &lt;CAB 
                ret = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2 * self.lenp2 * self.lenp3))
        return ret

    # 取得三角形的三個邊長值
    def getSSS(self):
        temp = []
        temp.append( self.getLenp1() )
        temp.append( self.getLenp2() )
        temp.append( self.getLenp3() )
        return temp

    # 取得三角形的三個角度值
    def getAAA(self):
        temp = []
        temp.append( self.getAp1() )
        temp.append( self.getAp2() )
        temp.append( self.getAp3() )
        return temp

    # 取得三角形的三個角度與三個邊長
    def getASASAS(self):
        temp = []
        temp.append(self.getAp1())
        temp.append(self.getLenp1())
        temp.append(self.getAp2())
        temp.append(self.getLenp2())
        temp.append(self.getAp3())
        temp.append(self.getLenp3())
        return temp
    #2P 2L return mid P
    def setPPSS(self, p1, p3, lenp1, lenp3):
        temp = []
        self.p1 = p1
        self.p3 = p3
        self.lenp1 = lenp1
        self.lenp3 = lenp3

        #bp3 is the angle beside p3 point, cp3 is the angle for line23, p2 is the output
        line31 = Line(p3, p1)
        self.lenp2 = line31.getR()
        #self.lenp2 = self.p3.distance(self.p1)
        #這裡是求角3
        ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2 * self.lenp1 * self.lenp2))
        #ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2 * self.lenp1 * self.lenp3))
        bp3 = line31.getT()
        cp3 = bp3 - ap3
        temp.append(p3.x + self.lenp1*math.cos(cp3))#p2.x
        temp.append(p3.y + self.lenp1*math.sin(cp3))#p2.y
        return temp

def tag(g, p):
    None

midpt = Point(0, 0)
tippt = Point(0, 0)
contour = []
# 執行繪圖流程, 注意 x, y 為 global variables
def draw():
    global theta, midpt, oldpt, p2, p3
    context.clearRect(0, 0, canvas.width, canvas.height)
    line1.drawMe(context)
    line2.drawMe(context)
    line3.drawMe(context)
    #triangle1.drawMe(context)
    #triangle2.drawMe(context)
    theta += dx
    p2.x = p1.x + line1.length*math.cos(theta*degree)
    p2.y = p1.y - line1.length*math.sin(theta*degree)
    # 找出一個 bug, 其中 link3_len 與 link2_len 輸入變數顛倒
    # 但是動態繪圖應該還有 bugs
    p3.x, p3.y = triangle2.setPPSS(p2,p4,link3_len,link2_len)
    # 計算垂直單位向量
    a = Coord(p3.x, p3.y)
    b = Coord(p2.x, p2.y)
    normal = perpendicular(perpendicular(normalize(a-b)))
    midpt.x = (p2.x + p3.x)/2
    midpt.y = (p2.y + p3.y)/2
    tippt.x = midpt.x - 375*normal.x
    tippt.y = midpt.y - 375*normal.y
    if theta &lt; 360:
        contour.append((tippt.x, tippt.y))
    context.beginPath()
    context.moveTo(midpt.x, midpt.y)
    context.lineTo(tippt.x, tippt.y)
    # 利用 fillRect 繪製一個長寬各 1 單位的正方形
    for i in range(len(contour)):
        context.fillRect(contour[i][0], contour[i][1], 1, 1)
    context.stroke()
    p1.tag(context)

# 以上為相關函式物件的定義區
# 全域變數
# 幾何位置輸入變數
x=10
y=10
r=10

# 畫布與繪圖內容
# 其他輸入變數
theta = 0
degree = math.pi/180.0
dx = 2
dy = 4

#set p1.p2.p3.p4 position
p1 =  Point(100,100)
p2 =  Point(200,100)
p3 =  Point(250,math.sqrt(250*250-50*50)+100)
p4 =  Point(300,100)

#accord position create link
line1 =  Link(p1,p2)
line2 =  Link(p2,p3)
line3 =  Link(p3,p4)
line4 =  Link(p1,p4)
line5 =  Link(p2,p4)

link2_len = p2.distance(p3)
link3_len = p3.distance(p4)

#link2_len = line1.getR()
#link3_len = line3.getR()
#alert(str(link2_len)+','+str(link3_len))

triangle1 =  Triangle(p1,p2,p4)
triangle2 =  Triangle(p2,p3,p4)

# 視窗載入時執行內容
# 繪圖畫布設定

canvas = document["fourbar"]
context = canvas.getContext("2d")

# 座標轉換, 移動 canvas.height 並且 y 座標變號, 也就是將原點座標移到畫面左下角
context.translate(0,canvas.height)
context.scale(1,-1)

#以間隔 10 micro seconds 重複呼叫 draw()
timer.set_interval(draw,10)
&lt;/script&gt;

&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- /.entry-content --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;col-sm-3&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sidebar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;section class="well well-sm"&gt;
    &lt;ul class="list-group list-group-flush"&gt;

            &lt;li class="list-group-item"&gt;&lt;h4&gt;&lt;i class="fa fa-home fa-lg"&gt;&lt;/i&gt;&lt;span class="icon-label"&gt;Recent Posts&lt;/span&gt;&lt;/h4&gt;
                &lt;ul class="list-group" id="recentposts"&gt;
                    &lt;li class="list-group-item"&gt;
                        &lt;a href="./ping-mian-ji-gou-mo-ni.html"&gt;
                            平面機構模擬
                        &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class="list-group-item"&gt;
                        &lt;a href="./brython-canvas-hui-tu.html"&gt;
                            Brython Canvas 繪圖
                        &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class="list-group-item"&gt;
                        &lt;a href="./xin-nian-kuai-le.html"&gt;
                            新年快樂
                        &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class="list-group-item"&gt;
                        &lt;a href="./ye-dan-kuai-le.html"&gt;
                            耶誕快樂
                        &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class="list-group-item"&gt;
                        &lt;a href="./ji-suan-ji-cheng-shi-w14-fan-li-zheng-li.html"&gt;
                            計算機程式 W14 範例整理
                        &lt;/a&gt;
                    &lt;/li&gt;
                &lt;/ul&gt;
            &lt;/li&gt;

            &lt;li class="list-group-item"&gt;&lt;a href="./categories.html"&gt;&lt;h4&gt;&lt;i class="fa fa-home fa-lg"&gt;&lt;/i&gt;&lt;span class="icon-label"&gt;Categories&lt;/span&gt;&lt;/h4&gt;&lt;/a&gt;
                &lt;ul class="list-group" id="categories"&gt;
                    &lt;li class="list-group-item"&gt;
                        &lt;a href="./category/course.html"&gt;
                            &lt;i class="fa fa-folder-open fa-lg"&gt;&lt;/i&gt; Course
                        &lt;/a&gt;
                    &lt;/li&gt;
                    &lt;li class="list-group-item"&gt;
                        &lt;a href="./category/misc.html"&gt;
                            &lt;i class="fa fa-folder-open fa-lg"&gt;&lt;/i&gt; Misc
                        &lt;/a&gt;
                    &lt;/li&gt;
                &lt;/ul&gt;
            &lt;/li&gt;

            &lt;li class="list-group-item"&gt;&lt;a href="./tags.html"&gt;&lt;h4&gt;&lt;i class="fa fa-tags fa-lg"&gt;&lt;/i&gt;&lt;span class="icon-label"&gt;Tags&lt;/span&gt;&lt;/h4&gt;&lt;/a&gt;
                &lt;ul class="list-group list-inline tagcloud" id="tags"&gt;
                &lt;/ul&gt;
            &lt;/li&gt;
    &lt;li class="list-group-item"&gt;&lt;h4&gt;&lt;i class="fa fa-external-link-square fa-lg"&gt;&lt;/i&gt;&lt;span class="icon-label"&gt;Links&lt;/span&gt;&lt;/h4&gt;
      &lt;ul class="list-group" id="links"&gt;
        &lt;li class="list-group-item"&gt;
            &lt;a href="http://getpelican.com/" target="_blank"&gt;
                Pelican
            &lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="list-group-item"&gt;
            &lt;a href="https://github.com/DandyDev/pelican-bootstrap3/" target="_blank"&gt;
                pelican-bootstrap3
            &lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="list-group-item"&gt;
            &lt;a href="https://github.com/getpelican/pelican-plugins" target="_blank"&gt;
                pelican-plugins
            &lt;/a&gt;
        &lt;/li&gt;
        &lt;li class="list-group-item"&gt;
            &lt;a href="https://github.com/Tipue/Tipue-Search" target="_blank"&gt;
                Tipue search
            &lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;/ul&gt;
&lt;/section&gt;

&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;/div&gt;
&lt;footer&gt;
   &lt;div class="container"&gt;
      &lt;hr&gt;
      &lt;div class="row"&gt;
         &lt;div class="col-xs-10"&gt;&amp;copy; 2017 KMOL
            &amp;middot; Powered by &lt;a href="https://github.com/DandyDev/pelican-bootstrap3" target="_blank"&gt;pelican-bootstrap3&lt;/a&gt;,
            &lt;a href="http://docs.getpelican.com/" target="_blank"&gt;Pelican&lt;/a&gt;,
            &lt;a href="http://getbootstrap.com" target="_blank"&gt;Bootstrap&lt;/a&gt;         &lt;/div&gt;
         &lt;div class="col-xs-2"&gt;&lt;p class="pull-right"&gt;&lt;i class="fa fa-arrow-up"&gt;&lt;/i&gt; &lt;a href="#"&gt;Back to top&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
      &lt;/div&gt;
   &lt;/div&gt;
&lt;/footer&gt;
&lt;script src="./theme/js/jquery.min.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;

&lt;script src="./theme/js/bootstrap.min.js"&gt;&lt;/script&gt;

&lt;!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) --&gt;

&lt;script src="./theme/js/respond.min.js"&gt;&lt;/script&gt;</summary><category term="W17"></category></entry><entry><title>CP W13 攝氏溫度</title><link href="./cp-w13-she-shi-wen-du.html" rel="alternate"></link><published>2016-12-09T14:10:00+08:00</published><updated>2016-12-09T14:10:00+08:00</updated><author><name>40223228</name></author><id>tag:,2016-12-09:./cp-w13-she-shi-wen-du.html</id><summary type="html">&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- ch01 基本的列印與輸入函式 --&gt;

&lt;script type="text/python3"&gt;
from browser import document
from browser import alert

'''
    # 利用 input() 取得使用者輸入, 然後進行資料處理或運算後, 列出結果
    #01-01.py
    print ("Hello World!")
    #01-02.py
    thetext = input("Enter some text ")
    print ("This is what you entered:")
    print (thetext)
    #01-03.py
    # Note that \n within quote marks forces a new line to be printed
    thetext = input("Enter some text\n")
    print ("This is what you entered:")
    print (thetext)
    #01-04.py
    prompt  = "Enter a some text "
    thetext = input(prompt)
    print ("This is what you entered:")
    print (thetext)
'''

def get_input(ev):
    the_input= input("請輸入")
    alert("輸入為:"+str(the_input))

document['ch01'].bind('click',get_input)
&lt;/script&gt;

&lt;p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;編寫一個可以將使用者輸入的攝氏溫度, 轉為華氏溫度.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div id="temperature"&gt;&lt;/div&gt;&lt;/p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
# 利用 document 根據 div 標註 id 設為 container 變數
container = doc['temperature']

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp(event):
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" + html.BR()
    container &lt;= output_string

# 與 id 為 'w13-1' 對應的 button 綁定, 且滑鼠 click 後, 呼叫 convTemp 函式執行
doc['w13-1'].bind('click',convTemp)
&lt;/script&gt;

&lt;p&gt;&lt;button id="w13-1"&gt;取攝氏溫度, 轉為華氏溫度&lt;/button&gt;&lt;/p&gt;

&lt;pre class="brush: python"&gt;
&lt;div id="temperature"&gt;&lt;/div&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
# 利用 document 根據 div 標註 id 設為 container 變數
container = doc['temperature']

# 因為此函式與滑鼠互動, 需要 event 當作輸入
def convTemp(event):
    mystring = ""
    cdegree = input("請輸入攝氏溫度:")
    fdegree = float(cdegree)*9/5 + 32
    output_string = "攝氏 " + str(cdegree) + "度=華氏 " + str(fdegree) + "度" + html.BR()
    container &lt;= output_string

# 與 id 為 'w13-1' 對應的 button 綁定, 且滑鼠 click 後, 呼叫 convTemp 函式執行
doc['w13-1'].bind('click',convTemp)
&lt;/script&gt;
&lt;button id="w13-1"&gt;取攝氏溫度, 轉為華氏溫度&lt;/button&gt;
&lt;/pre&gt;</summary><category term="W13"></category></entry><entry><title>CP W13練習</title><link href="./cp-w13lian-xi.html" rel="alternate"></link><published>2016-12-09T14:10:00+08:00</published><updated>2016-12-09T14:10:00+08:00</updated><author><name>40223228</name></author><id>tag:,2016-12-09:./cp-w13lian-xi.html</id><summary type="html">&lt;p&gt;將&lt;a href=" http://mde.tw/2016fallcp/course/Python3Programs.txt"&gt; http://mde.tw/2016fallcp/course/Python3Programs.txt 整理成Brython&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫圖 --&gt;

&lt;div id="container"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
container = doc['container']
mystring =""
num = input("請輸入重複執行次數:")
#for i in range(1,11):
for i in range(1,int(num)+1):
    mystring +=str(i)+":hello mde"+html.BR()    
container&lt;= mystring
&lt;/script&gt;

&lt;p&gt;開始進行範例分類&lt;/p&gt;
&lt;p&gt;接受使用者的輸入&lt;/p&gt;
&lt;p&gt;利用alert()顯示結果&lt;/p&gt;
&lt;p&gt;直接列印結果&lt;/p&gt;</summary><category term="W13"></category></entry><entry><title>CP W14練習</title><link href="./cp-w14lian-xi.html" rel="alternate"></link><published>2016-12-09T14:10:00+08:00</published><updated>2016-12-09T14:10:00+08:00</updated><author><name>40223228</name></author><id>tag:,2016-12-09:./cp-w14lian-xi.html</id><summary type="html">&lt;p&gt;將&lt;a href=" http://mde.tw/2016fallcp/course/Python3Programs.txt"&gt; http://mde.tw/2016fallcp/course/Python3Programs.txt 整理成Brython&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- ch01 基本的列印與輸入函式 --&gt;

&lt;script type="text/python3"&gt;
from browser import document
from browser import alert

'''
    # 利用 input() 取得使用者輸入, 然後進行資料處理或運算後, 列出結果
    #01-01.py
    print ("Hello World!")
    #01-02.py
    thetext = input("Enter some text ")
    print ("This is what you entered:")
    print (thetext)
    #01-03.py
    # Note that \n within quote marks forces a new line to be printed
    thetext = input("Enter some text\n")
    print ("This is what you entered:")
    print (thetext)
    #01-04.py
    prompt  = "Enter a some text "
    thetext = input(prompt)
    print ("This is what you entered:")
    print (thetext)
'''

def get_input(ev):
    the_input= input("請輸入")
    alert("輸入為:"+str(the_input))

document['ch01'].bind('click',get_input)
&lt;/script&gt;

&lt;pre class="brush: python"&gt;
&lt;script type="text/python3"&gt;
from browser import document
from browser import alert

def get_input(ev):
    the_input= input("請輸入")
    alert("輸入為:"+str(the_input))

document['ch01'].bind('click',get_input)
&lt;/script&gt;
&lt;button id="ch01"&gt;取輸入後, 列印出來&lt;/button&gt;
&lt;/pre&gt;</summary><category term="W14"></category></entry><entry><title>W10 Brython 繪圖範例</title><link href="./w10-brython-hui-tu-fan-li.html" rel="alternate"></link><published>2016-11-18T02:09:00+08:00</published><updated>2016-11-18T02:09:00+08:00</updated><author><name>40223228</name></author><id>tag:,2016-11-18:./w10-brython-hui-tu-fan-li.html</id><summary type="html">&lt;p&gt;Brython 繪圖&lt;/p&gt;
&lt;p&gt;繪圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫兩條直線 --&gt;

&lt;canvas id="guitarchord" width="600" height="200"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math

canvas = doc["guitarchord"]
ctx = canvas.getContext("2d")
ctx.beginPath()
ctx.lineWidth = 1
inc=5
for i in range(100):
    ctx.moveTo(100+i*inc,100)
    ctx.lineTo(100+i*inc, 200)

# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
ctx.stroke()
ctx.closePath()
&lt;/script&gt;

</summary><category term="Brython"></category></entry><entry><title>W12-1 Brython 繪圖範例</title><link href="./w12-1-brython-hui-tu-fan-li.html" rel="alternate"></link><published>2016-11-18T02:09:00+08:00</published><updated>2016-11-18T02:09:00+08:00</updated><author><name>40223228</name></author><id>tag:,2016-11-18:./w12-1-brython-hui-tu-fan-li.html</id><summary type="html">&lt;p&gt;繪圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫圖 --&gt;

&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")

def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

w=20
h=30
background(100,100,w,h,5,6,ctx)
&lt;/script&gt;</summary><category term="Brython"></category></entry><entry><title>W12-2 Brython 繪圖範例</title><link href="./w12-2-brython-hui-tu-fan-li.html" rel="alternate"></link><published>2016-11-18T02:09:00+08:00</published><updated>2016-11-18T02:09:00+08:00</updated><author><name>40223228</name></author><id>tag:,2016-11-18:./w12-2-brython-hui-tu-fan-li.html</id><summary type="html">&lt;p&gt;繪圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫圖 --&gt;

&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")

def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

def canvasText(x, y, fontSize, string, sup, sub, color, ctx):
    # 標定各弦音符號, 以及把位編號
    ctx.beginPath()
    ctx.fillStyle = color
    ctx.strokeStyle = color
    #ctx.font = "20px Arial"
    ctx.font = str(fontSize)+ "px Arial"
    ctx.fillText(string, x, y)
    ctx.font = str(fontSize-8)+ "px Arial"
    if sup != "":
        ctx.fillText(sup, x+fontSize/1.6, y-fontSize/2)
    if sub != "":
        ctx.fillText(sup, x+fontSize/1.6, y)
    ctx.fill()
    ctx.stroke()
    ctx.closePath()

w = 20
h = 30
background(100, 100, w, h, 5, 5, ctx)
canvasText(100,  80, 20, "A", "b", "", "black", ctx)
&lt;/script&gt;</summary><category term="Brython"></category></entry><entry><title>W12 Brython 繪圖範例</title><link href="./w12-brython-hui-tu-fan-li.html" rel="alternate"></link><published>2016-11-18T02:09:00+08:00</published><updated>2016-11-18T02:09:00+08:00</updated><author><name>40223228</name></author><id>tag:,2016-11-18:./w12-brython-hui-tu-fan-li.html</id><summary type="html">&lt;p&gt;繪圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫方格線 --&gt;

&lt;canvas id="japanflag3" width="600" height="300"&gt;&lt;/canvas&gt;

&lt;div id="container3"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
import math
import re
# 準備繪圖畫布
canvas = doc["japanflag3"]
container = doc["container3"]
ctx = canvas.getContext("2d")
# 以下可以利用 ctx 物件進行畫圖

# 水平線
for i in range(6):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    if i == 0:
        ctx.lineWidth = 7
    else:
        ctx.lineWidth = 1
    ctx.moveTo(99, 100+i*30)
    ctx.lineTo(201, 100+i*30)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()

# 垂直線
for i in range(6):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    ctx.moveTo(100+i*20, 100)
    ctx.lineTo(100+i*20, 250)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()
'''
# 以下將 canvas 畫布內容轉為 img tag, 並且顯示在 container 物件
img = canvas.toDataURL("image/png")
# 利用 re.sub, 將原本要直接開圖檔的 data:image 標頭, 改為 data:application/octet-stream, 可直接下載存檔
# 使用 re 模組之前必須先 import re
img = re.sub("^data:image\/[^;]", "data:application/octet-stream", img)
# 宣告 anchor markup attribute download, 可以指定下載儲存檔名
container &lt;= html.A("save image", href=img, download="guitar_chord.png")
'''
&lt;/script&gt;</summary><category term="Brython"></category></entry></feed>